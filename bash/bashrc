source $HOME/.bash_profile

case $- in
  *i*) ;;
    *) return;;
esac

export OSH=$HOME/.oh-my-bash
OSH_THEME="agnoster"

completions=(
  git
  composer
  ssh
)

aliases=(
  general
)

# python3 virtualenv
alias create="python3 -m virtualenv --python=python3 .venv"
alias activate="source ./.venv/bin/activate"
alias python=$(which python3)
# editor
alias emacs="emacs -nw"
# overwrite guard
alias rm="rm -i"
alias cp="cp -i"
alias mv="mv -i"
if [[ "$OSTYPE" == "darwin"* ]]; then
    alias ofd="open ."
else
    # linux
    alias ofd="xdg-open ."
fi

plugins=(
  git
  bashmarks
)

# gpg and ssh
if type gpg > /dev/null; then
	export SSH_KEY_PATH="$HOME/.ssh/config"
	export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
	export GPG_TTY=$(tty)
fi

# defaults
export LANG=en_US.UTF-8
export EDITOR="$(which emacs) -nw"
export GIT_EDITOR=$EDITOR

### utility functions

# Fix agent refused operation error for GPG with MacOS
fix-gpg-darwin () {
    echo UPDATESTARTUPTTY | gpg-connect-agent
}

# Usage: install-deb-package DOWNLOAD_URL PROGRAM_NAME(optional)
install-deb-package () {
    # check arguments
    if [[ -z $1 ]]; then
       echo "No download_url argument passed" >&2
       return 1
    fi
    download_url="$1"
    program_name="$2"
    if [[ -z $2 ]]; then
        program_name="$(date +%N)"
    fi
    # check debian
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        echo "Not linux" >&2
        return 1
    fi
    # download and complete
    download_path="/tmp/${program_name}.deb"
    wget "${download_url}" -O "${download_path}"
    if [[ $? -ne 0 ]]; then
       echo "Network error!" >&2
       return 1
    fi
    echo "Using sudo for dpkg..."
    sudo dpkg -i "${download_path}"
    if [[ $? -ne 0 ]]; then
        echo "dpkg install error" >&2
        return 1
    fi
    echo "Removing ${download_path}"
    rm -f "${download_path}"
    if [[ $? -ne 0 ]]; then
        echo 'Error while removing cached file' >&2
        return 1
    fi
    echo "Successfully installed."
    return 0
}

update-vscode () {
    url='https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64'
    install-deb-package $url 'vscode'
    return $?
}

update-discord () {
    url='https://discord.com/api/download/stable?platform=linux&format=deb'
    install-deb-package $url 'discord'
    return $? 
}

update-chrome () {
    url='https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb'
    install-deb-package $url 'chrome'
    return $?
}    

source $OSH/oh-my-bash.sh
